{
    "id": "75b89d9aa0149868bd2c4cf08cdefbef",
    "name": "The Confluence Cloud REST API",
    "description": null,
    "auth": null,
    "events": null,
    "variables": [],
    "order": [],
    "folders_order": [],
    "folders": [],
    "requests": [
        {
            "id": "5df17ad852ca125736d87f9684e8207f",
            "name": "Get audit records",
            "url": "https\/\/audit",
            "description": "Returns all records in the audit log, optionally for a certain date range. \nThis contains information about events like space exports, group membership \nchanges, app installations, etc. For more information, see \n[Audit log](https:\/\/confluence.atlassian.com\/confcloud\/audit-log-802164269.html) \nin the Confluence administrator's guide.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "startDate",
                    "description": "Filters the results to the records on or after the `startDate`. \nThe `startDate` must be specified as a [timestamp](https:\/\/www.unixtimestamp.com\/).",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "endDate",
                    "description": "Filters the results to the records on or before the `endDate`. \nThe `endDate` must be specified as a [timestamp](https:\/\/www.unixtimestamp.com\/).",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "searchString",
                    "description": "Filters the results to records that have string property values \nmatching the `searchString`.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "5507b76268e24c23ffd7b7ce87997364",
            "name": "Create audit record",
            "url": "https\/\/audit",
            "description": "Creates a record in the audit log. \n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ee376395c47ebf12f355f63b5f4bdaf6",
            "name": "Export audit records",
            "url": "https\/\/audit\/export",
            "description": "Exports audit records as a CSV file or ZIP file.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "startDate",
                    "description": "Filters the results to the records on or after the `startDate`. \nThe `startDate` must be specified as a [timestamp](https:\/\/www.unixtimestamp.com\/).",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "endDate",
                    "description": "Filters the results to the records on or before the `endDate`. \nThe `endDate` must be specified as a [timestamp](https:\/\/www.unixtimestamp.com\/).",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "searchString",
                    "description": "Filters the results to records that have string property values \nmatching the `searchString`.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "format",
                    "description": "The format of the export file for the audit records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "e3180d932b35ab8611a4d140bfa730dd",
            "name": "Get retention period",
            "url": "https\/\/audit\/retention",
            "description": "Returns the retention period for records in the audit log. The retention \nperiod is how long an audit record is kept for, from creation date until \nit is deleted.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "2fd13f5d4d0ec1c5ccb9f27ee72f209c",
            "name": "Set retention period",
            "url": "https\/\/audit\/retention",
            "description": "Sets the retention period for records in the audit log. The retention period \ncan be set to a maximum of 20 years.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "da099a57e1cff548414892621d9f2ebb",
            "name": "Get audit records for time period",
            "url": "https\/\/audit\/since",
            "description": "Returns records from the audit log, for a time period back from the current \ndate. For example, you can use this method to get the last 3 months of records.\n\nThis contains information about events like space exports, group membership \nchanges, app installations, etc. For more information, see \n[Audit log](https:\/\/confluence.atlassian.com\/confcloud\/audit-log-802164269.html) \nin the Confluence administrator's guide.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluen",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "number",
                    "description": "The number of units for the time period.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "units",
                    "description": "The unit of time that the time period is measured in.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "searchString",
                    "description": "Filters the results to records that have string property values \nmatching the `searchString`.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "2fce00582d26c722586b72dc5ba26b2d",
            "name": "Get content",
            "url": "https\/\/content",
            "description": "Returns all content in a Confluence instance.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nOnly content that the user has permission to view will be returned.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "type",
                    "description": "The type of content to return.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "title",
                    "description": "The title of the page to be returned. Required for <code>page<\/code> type.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "postingDay",
                    "description": "The posting date of the blog post to be returned. Required for\n<code>blogpost<\/code> type. Format: <code>yyyy-mm-dd<\/code>.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "trigger",
                    "description": "If set to `viewed`, the request will trigger a 'viewed' event for the content. \nWhen this event is triggered, the page\/blogpost will appear on the 'Recently visited' \ntab of the user's Confluence dashboard.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "orderby",
                    "description": "Orders the content by a particular field. Specify the field and sort direction for \nthis parameter, as follows: 'fieldpath asc\/desc'. For example, 'history.createdDate desc'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "94f0bcba70a1b0c2202d025ab807d5ae",
            "name": "Create content",
            "url": "https\/\/content",
            "description": "Creates a new piece of content or publishes an existing draft. \n\nTo publish a draft, add the `id` and `status` properties to the body of the request. \nSet the `id` to the ID of the draft and set the `status` to 'current'. When the \nrequest is sent, a new piece of content will be created and the metadata from the \ndraft will be transferred into it.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: 'Add' permission for the \nspace that the content will be created in, and permi",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "fb79f2338049f722a87883be2306f7db",
            "name": "Publish legacy draft",
            "url": "https\/\/content\/blueprint\/instance\/{draftId}",
            "description": "Publishes a legacy draft of a page created from a blueprint. Legacy drafts \nwill eventually be removed in favour of shared drafts. For now, this method \nworks the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the draft and 'Add' permission for the space that \nthe content will be created in.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "draftId",
                    "description": "The ID of the draft page that was created from a blueprint. \nYou can find the `draftId` in the Confluence application by \nopening the draft page and checking the page URL.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "858bd07775511a62a9612be3297889ca",
            "name": "Publish shared draft",
            "url": "https\/\/content\/blueprint\/instance\/{draftId}",
            "description": "Publishes a shared draft of a page created from a blueprint.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the draft and 'Add' permission for the space that \nthe content will be created in.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "draftId",
                    "description": "The ID of the draft page that was created from a blueprint. \nYou can find the `draftId` in the Confluence application by \nopening the draft page and checking the page URL.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "a4a453e23f90ebb3a7374dadba8d9d9d",
            "name": "Search content by CQL",
            "url": "https\/\/content\/search",
            "description": "Returns the list of content that matches a Confluence Query Language \n(CQL) query. For information on CQL, see: \n[Advanced searching using CQL](https:\/\/developer.atlassian.com\/cloud\/confluence\/advanced-searching-using-cql\/).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nOnly content that the user has permission to view will be returned.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "cql",
                    "description": "The CQL string that is used to find the requested content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "cqlcontext",
                    "description": "The space, content, and content status to execute the search against. \nSpecify this as an object with the following properties:\n\n- `spaceKey` Key of the space to search against. Optional.\n- `contentId` ID of the content to search against. Optional. Must \nbe in the space spacified by `spaceKey`.\n- `contentStatuses` Content statuses to search against. Optional.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b531018b4b3c7ab6d4a1bfd2b57e8e5d",
            "name": "Get content by ID",
            "url": "https\/\/content\/{id}",
            "description": "Returns a single piece of content, like a page or a blog post.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "version",
                    "description": "The version number of the content to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "embeddedContentRender",
                    "description": "The version of embedded content (e.g. attachments) to render. \n\n- <code>current<\/code> renders the latest version of the embedded content.\n- <code>version-at-save<\/code> renders the version of the embedded content \nat the time of save.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "trigger",
                    "description": "If set to `viewed`, the request will trigger a 'viewed' event for the content. \nWhen this event is triggered, the page\/blogpost will appear on the 'Recently visited' \ntab of the user's Confluence dashboard.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "94abb2f8ab086f8c94a169f419203df8",
            "name": "Update content",
            "url": "https\/\/content\/{id}",
            "description": "Updates a piece of content. Use this method to update the title or body \nof a piece of content, change the status, change the parent page, and more.\n\nNote, updating draft content is currently not supported.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "conflictPolicy",
                    "description": "The action that should be taken when conflicts are discovered. \nOnly used when publishing a draft page.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "bb86191fc14b8907571e94eca22e267a",
            "name": "Delete content",
            "url": "https\/\/content\/{id}",
            "description": "Moves a piece of content to the space's trash or purges it from the trash, \ndepending on the content's type and status:\n\n- If the content's type is `page` or `blogpost` and its status is `current`, \nit will be trashed.\n- If the content's type is `page` or `blogpost` and its status is `trashed`, \nthe content will be purged from the trash and deleted permanently. Note, \nyou must also set the `status` query parameter to `trashed` in your request.\n- If the content's type is `comment` or `attachment`",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "23941375c42593a2f1301150aaa39906",
            "name": "Get content children",
            "url": "https\/\/content\/{id}\/child",
            "description": "Returns a map of the direct children of a piece of content. A piece of content \nhas different types of child content, depending on its type. These are \nthe default parent-child content type relationships:\n\n- `page`: child content is `page`, `comment`, `attachment`\n- `blogpost`: child content is `comment`, `attachment`\n- `attachment`: child content is `comment`\n- `comment`: child content is `attachment`\n\nApps can override these default relationships. Apps can also introduce \nnew content types tha",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parentVersion",
                    "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "d45de451d6558abea8d0d3ace7228dbb",
            "name": "Get attachments",
            "url": "https\/\/content\/{id}\/child\/attachment",
            "description": "Returns the attachments for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "filename",
                    "description": "Filter the results to attachments that match the filename.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "mediaType",
                    "description": "Filter the results to attachments that match the media type.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "37859953617a051da7a1fa18519979c8",
            "name": "Create attachment",
            "url": "https\/\/content\/{id}\/child\/attachment",
            "description": "Adds an attachment to a piece of content. This method only adds a new \nattachment. If you want to update an existing attachment, use \n[Create or update attachments](#api-content-id-child-attachment-put).\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multipart\/form-data.\n\nThe media type 'multipart\/form-data' is defined in [RFC 1867](https:\/\/www.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "db113930ddc7ab57aa20e068ca9b5c2b",
            "name": "Create or update attachment",
            "url": "https\/\/content\/{id}\/child\/attachment",
            "description": "Adds an attachment to a piece of content. If the attachment already exists \nfor the content, then the attachment is updated (i.e. a new version of the \nattachment is created).\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multipart\/form-data.\n\nThe media type 'multipart\/form-data' is defined in [RFC 1867](https:\/\/www.ietf.org\/rfc\/rfc1867.txt). \n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c5b013d6d2bdbdfde398718315bc46e9",
            "name": "Update attachment properties",
            "url": "https\/\/content\/{id}\/child\/attachment\/{attachmentId}",
            "description": "Updates the attachment properties, i.e. the non-binary data of an attachment \nlike the filename, media-type, comment, and parent container.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "attachmentId",
                    "description": "The ID of the attachment to update.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "3e1ef57ce187ba5c84627dd9bf0ba880",
            "name": "Update attachment data",
            "url": "https\/\/content\/{id}\/child\/attachment\/{attachmentId}\/data",
            "description": "Updates the binary data of an attachment, given the attachment ID, and \noptionally the comment and the minor edit field.\n\nThis method is essentially the same as [Create or update attachments](#api-content-id-child-attachment-put), \nexcept that it matches the attachment ID rather than the name.\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multi",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "attachmentId",
                    "description": "The ID of the attachment to update.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "0326056095e77631695a089e079af493",
            "name": "Get content comments",
            "url": "https\/\/content\/{id}\/child\/comment",
            "description": "Returns the comments on a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: 'View' permission for the space, \nand permission to view the content if it is a page.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parentVersion",
                    "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "location",
                    "description": "The location of the comments in the page. Multiple locations can be specified. \nIf no location is specified, comments from all locations are returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "depth",
                    "description": "Currently, this parameter is not used. \nComments are returned at the root level only.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "2883f97d5cc97485eb84884da8c32274",
            "name": "Get content children by type",
            "url": "https\/\/content\/{id}\/child\/{type}",
            "description": "Returns all children of a given type, for a piece of content. \nA piece of content has different types of child content, depending on its type:\n\n- `page`: child content is `page`, `comment`, `attachment`\n- `blogpost`: child content is `comment`, `attachment`\n- `attachment`: child content is `comment`\n- `comment`: child content is `attachment`\n\nCustom content types that are provided by apps can also be returned.\n\nNote, this method only returns direct children. To return children at all \nlevels, us",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "type",
                    "description": "The type of children to return.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parentVersion",
                    "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "edf51fecacdb4128e1706ff5f6cf3f49",
            "name": "Get content descendants",
            "url": "https\/\/content\/{id}\/descendant",
            "description": "Returns a map of the descendants of a piece of content. This is similar \nto [Get content children](#api-content-id-child-get), except that this \nmethod returns child pages at all levels, rather than just the direct \nchild pages.\n\nA piece of content has different types of descendants, depending on its type:\n\n- `page`: descendant is `page`, `comment`, `attachment`\n- `blogpost`: descendant is `comment`, `attachment`\n- `attachment`: descendant is `comment`\n- `comment`: descendant is `attachment`\n\nTh",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "140b7323b6dc965afe71f373232d65f7",
            "name": "Get content descendants by type",
            "url": "https\/\/content\/{id}\/descendant\/{type}",
            "description": "Returns all descendants of a given type, for a piece of content. This is \nsimilar to [Get content children by type](#api-content-id-child-type-get), \nexcept that this method returns child pages at all levels, rather than just \nthe direct child pages.\n\nA piece of content has different types of descendants, depending on its type:\n\n- `page`: descendant is `page`, `comment`, `attachment`\n- `blogpost`: descendant is `comment`, `attachment`\n- `attachment`: descendant is `comment`\n- `comment`: descenda",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "type",
                    "description": "The type of children to return.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "509e58f9bfcb61bb0dd058842d7ed120",
            "name": "Get history for content",
            "url": "https\/\/content\/{id}\/history",
            "description": "Returns the most recent update for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: Permission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "fbff520947bb775db1e559cd63a79e00",
            "name": "Get macro body by macro ID",
            "url": "https\/\/content\/{id}\/history\/{version}\/macro\/id\/{macroId}",
            "description": "Returns the body of a macro in storage format, for the given macro ID. \nThis includes information like the name of the macro, the body of the macro, \nand any macro parameters. This method is mainly used by Cloud apps.\n\nAbout the macro ID: When a macro is created in a new version of content, \nConfluence will generate a random ID for it, unless an ID is specified \n(by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'. \nThe ID is then persisted as new versions ",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "version",
                    "description": "The version of the content that contains the macro.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "macroId",
                    "description": "The ID of the macro. This is usually passed by the app that the\nmacro is in. Otherwise, find the macro ID by querying the desired \ncontent and version, then expanding the body in storage format. \nFor example, '\/content\/196611\/version\/7?expand=content.body.storage'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ad697437eb4534fe26a6799771607fbc",
            "name": "Get labels for content",
            "url": "https\/\/content\/{id}\/label",
            "description": "Returns the labels on a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'View' permission for the space and permission to view the content if it is a page.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "prefix",
                    "description": "Filters the results to labels with the specified prefix. If this parameter  \nis not specified, then labels with any prefix will be returned.\n\n- `global` prefix is used by default when a user adds a label \nvia the UI.\n- `my` prefix can be explicitly added by a user when adding a label \nvia the UI, e.g. 'my:example-label'. Also, when a page is selected as \na favourite, the 'my:favourite' label is automatically added.\n- `team` can used when adding labels via [Add labels to content](#api-content-id-",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "49e77f16e962d150850f17641d28fbb5",
            "name": "Add labels to content",
            "url": "https\/\/content\/{id}\/label",
            "description": "Adds labels to a piece of content. Does not modify the existing labels.\n\nNotes:\n\n- Labels can also be added when creating content ([Create content](#api-content-post)).\n- Labels can be updated when updating content ([Update content](#api-content-id-put)). \nThis will delete the existing labels and replace them with the labels in \nthe request.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "e98c34cc8c24674ba6337ec9ae813592",
            "name": "Remove label from content using query parameter",
            "url": "https\/\/content\/{id}\/label",
            "description": "Removes a label from a piece of content. This is similar to \n[Remove label from content](#api-content-id-label-label-delete) \nexcept that the label name is specified via a query parameter. \n\nUse this method if the label name has \"\/\" characters, as \n[Remove label from content using query parameter](#api-content-id-label-delete) \ndoes not accept \"\/\" characters for the label name.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "name",
                    "description": "The name of the label to be removed.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "634e34cfd52f29d16b9ee3433835c50d",
            "name": "Remove label from content",
            "url": "https\/\/content\/{id}\/label\/{label}",
            "description": "Removes a label from a piece of content. This is similar to \n[Remove label from content using query parameter](#api-content-id-label-delete) \nexcept that the label name is specified via a path parameter. \n\nUse this method if the label name does not have \"\/\" characters, as the path \nparameter does not accept \"\/\" characters for security reasons. Otherwise, \nuse [Remove label from content using query parameter](#api-content-id-label-delete).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozK",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "label",
                    "description": "The name of the label to be removed.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "1fd553c9700af049e3e4b22bb0c5bed5",
            "name": "Get watches for page",
            "url": "https\/\/content\/{id}\/notification\/child-created",
            "description": "Returns the watches for a page. A user that watches a page will receive \nreceive notifications when the page is updated.\n\nIf you want to manage watches for a page, use the following `user` methods:\n\n- [Get content watch status for user](#api-user-watch-content-contentId-get)\n- [Add content watch](#api-user-watch-content-contentId-post)\n- [Remove content watch](#api-user-watch-content-contentId-delete)\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access th",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "d5cd60e017ba346490954deb3fcc0470",
            "name": "Get watches for space",
            "url": "https\/\/content\/{id}\/notification\/created",
            "description": "Returns all space watches for the space that the content is in. A user that \nwatches a space will receive receive notifications when any content in the \nspace is updated.\n\nIf you want to manage watches for a space, use the following `user` methods:\n\n- [Get space watch status for user](#api-user-watch-space-spaceKey-get)\n- [Add space watch](#api-user-watch-space-spaceKey-post)\n- [Remove space watch](#api-user-watch-space-spaceKey-delete)\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw)",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8acb5efd428d3ccba081f000c6e6dbf3",
            "name": "Copy page hierarchy",
            "url": "https\/\/content\/{id}\/pagehierarchy\/copy",
            "description": "Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.\n The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.\n The titleOptions object defines the rules of renaming page titles during the copy;\n for example, search and replace can be used in conjunction to rewrite the copied page titles.\n\n Response example:\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "3c418b727579ba6582b0387b336ba2af",
            "name": "Get content properties",
            "url": "https\/\/content\/{id}\/property",
            "description": "Returns the properties for a piece of content. For more information \nabout content properties, see [Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it is a page.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "777b8f4948071c04cce0c9cd2456adba",
            "name": "Create content property",
            "url": "https\/\/content\/{id}\/property",
            "description": "Creates a property for an existing piece of content. For more information \nabout content properties, see [Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\nThis is the same as [Create content property for key](#api-content-id-property-key-post) \nexcept that the key is specified in the request body instead of as a \npath parameter.\n\nContent properties can also be added when creating a new piece of content \nby including them in the `metadata",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b3f86485381e9865004df3994a6f5a0e",
            "name": "Get content property",
            "url": "https\/\/content\/{id}\/property\/{key}",
            "description": "Returns a content property for a piece of content. For more information, see \n[Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it is a page.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b05aaa7c48ab29d488586a53f591af22",
            "name": "Create content property for key",
            "url": "https\/\/content\/{id}\/property\/{key}",
            "description": "Creates a property for an existing piece of content. For more information \nabout content properties, see [Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\nThis is the same as [Create content property](#api-content-id-property-post) \nexcept that the key is specified as a path parameter instead of in the \nrequest body.\n\nContent properties can also be added when creating a new piece of content \nby including them in the `metadata.properties`",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b8c83ccd096819fb8f695434496566bc",
            "name": "Update content property",
            "url": "https\/\/content\/{id}\/property\/{key}",
            "description": "Updates an existing content property. This method will also create a new \nproperty for a piece of content, if the property key does not exist and \nthe property version is 1. For more information about content properties, see \n[Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "aeb97e5ad7915a2ca53321a6ea7f14ac",
            "name": "Delete content property",
            "url": "https\/\/content\/{id}\/property\/{key}",
            "description": "Deletes a content property. For more information about content properties, see \n[Content properties in the REST API](https:\/\/developer.atlassian.com\/cloud\/confluence\/content-properties\/).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "bb8a523650b18be5b0fa7cebeb4833e2",
            "name": "Get restrictions",
            "url": "https\/\/content\/{id}\/restriction",
            "description": "Returns the restrictions on a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "edfe8e4f1931e5877995baa3e3b498a9",
            "name": "Add restrictions",
            "url": "https\/\/content\/{id}\/restriction",
            "description": "Adds restrictions to a piece of content. Note, this does not change any \nexisting restrictions on the content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "3ee1c79bfb5a0ae4eabfa07d10cff7ae",
            "name": "Update restrictions",
            "url": "https\/\/content\/{id}\/restriction",
            "description": "Updates restrictions for a piece of content. This removes the existing \nrestrictions and replaces them with the restrictions in the request.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "94c300f3ab83fd679ba15209350e0044",
            "name": "Delete restrictions",
            "url": "https\/\/content\/{id}\/restriction",
            "description": "Removes all restrictions (read and update) on a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "7112c9eda93e20cc067407f02cc54363",
            "name": "Get restrictions by operation",
            "url": "https\/\/content\/{id}\/restriction\/byOperation",
            "description": "Returns restrictions on a piece of content by operation. This method is \nsimilar to [Get restrictions](#api-content-id-restriction-get) except that \nthe operations are properties of the return object, rather than items in \na results array. \n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ef050b15cf7b5197e2d0490ff5e3baf2",
            "name": "Get restrictions for operation",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}",
            "description": "Returns the restictions on a piece of content for a given operation (read \nor update).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "30a02150295089f4aac6128a9f7b9eb9",
            "name": "Get content restriction status for group",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/group\/{groupName}",
            "description": "Returns whether the specified content restriction applies to a group. \nFor example, if the 'admins' group has permission to read a page with an \nID of 123, then the following request will return true:\n\n`https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/content\/123\/restriction\/byOperation\/read\/group\/admins`\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "groupName",
                    "description": "The name of the group to be queried for whether the content restriction \napplies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "1761df24be5943d606608e3867a6cd10",
            "name": "Add group to content restriction",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/group\/{groupName}",
            "description": "Adds a group to a content restriction. That is, grant read or update \npermission to the group for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "groupName",
                    "description": "The name of the group to be queried for whether the content restriction \napplies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "967aec5f6c602579aab8eab59a28a1eb",
            "name": "Remove group from content restriction",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/group\/{groupName}",
            "description": "Removes a group from a content restriction. That is, remove read or update \npermission for the group for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "groupName",
                    "description": "The name of the group to be queried for whether the content restriction \napplies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "405cef86e7a652fd86ee1568662ea7a0",
            "name": "Get content restriction status for user",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/user",
            "description": "Returns whether the specified content restriction applies to a user. \nFor example, if the user 'admin' has permission to read a page with an \nID of 123, then the following request will return true:\n\n`https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/content\/123\/restriction\/byOperation\/read\/user?username=admin`\n\nOne of `key`, `username`, or `accountId` must be specified as a query \nparameter to identify the user.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c408365d357bd0d03d669406f5fb3c02",
            "name": "Add user to content restriction",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/user",
            "description": "Adds a user to a content restriction. That is, grant read or update \npermission to the user for a piece of content.\n\nOne of `key`, `username`, or `accountId` must be specified as a query \nparameter to identify the user.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "503a58c5e0c57a84025616cc0a33238c",
            "name": "Remove user from content restriction",
            "url": "https\/\/content\/{id}\/restriction\/byOperation\/{operationKey}\/user",
            "description": "Removes a group from a content restriction. That is, remove read or update \npermission for the group for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to edit the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "operationKey",
                    "description": "The operation type of the restrictions to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b1ff8d167f715ad9be35e84590563861",
            "name": "Get content versions",
            "url": "https\/\/content\/{id}\/version",
            "description": "Returns the versions for a piece of content in descending order.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "e9d5ae38a14e1416e7f90fa53443cbb1",
            "name": "Restore content version",
            "url": "https\/\/content\/{id}\/version",
            "description": "Restores a historical version to be the latest version. That is, a new version \nis created with the content of the historical version.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "0dfb51ec5977aeb7fb76ccf7bad0973a",
            "name": "Get content version",
            "url": "https\/\/content\/{id}\/version\/{versionNumber}",
            "description": "Returns a version for a piece of content.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "versionNumber",
                    "description": "The number of the version to be retrieved.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "cbb1f5a9c15794551b92f227b511224c",
            "name": "Delete content version",
            "url": "https\/\/content\/{id}\/version\/{versionNumber}",
            "description": "Delete a historical version. This does not delete the changes made to the \ncontent in that version, rather the changes for the deleted version are \nrolled up into the next version. Note, you cannot delete the current version.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to update the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "versionNumber",
                    "description": "The number of the version to be retrieved.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "6cfa2ab23f63c879902c93293f996315",
            "name": "Convert content body",
            "url": "https\/\/contentbody\/convert\/{to}",
            "description": "Converts a content body from one format to another format.\n\nSupported conversions:\n\n- storage: view, export_view, styled_view, editor\n- editor: storage\n- view: none\n- export_view: none\n- styled_view: none\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nIf request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "to",
                    "description": "The name of the target format for the content body.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "spaceKeyContext",
                    "description": "The space key used for resolving embedded content (page includes, \nfiles, and links) in the content body. For example, if the source content \ncontains the link `<ac:link><ri:page ri:content-title=\"Example page\" \/><ac:link>` \nand the `spaceKeyContext=TEST` parameter is provided, then the link \nwill be converted to a link to the \"Example page\" page in the \"TEST\" space.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "contentIdContext",
                    "description": "The content ID used to find the space for resolving embedded content \n(page includes, files, and links) in the content body. For example, \nif the source content contains the link `<ac:link><ri:page ri:content-title=\"Example page\" \/><ac:link>` \nand the `contentIdContext=123` parameter is provided, then the link \nwill be converted to a link to the \"Example page\" page in the same space \nthat has the content with ID=123. Note, `spaceKeyContext` will be ignored \nif this parameter is provided.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "embeddedContentRender",
                    "description": "The version of embedded content (e.g. attachments) to render. \n\n- <code>current<\/code> renders the latest version of the embedded content.\n- <code>version-at-save<\/code> renders the version of the embedded content \nat the time of save.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b96369217af58856292d59a19fe55270",
            "name": "Get groups",
            "url": "https\/\/group",
            "description": "Returns all user groups. The returned groups are ordered alphabetically in\nascending order by group name.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "75fe361969a5dbe91143edf174e29950",
            "name": "Get group",
            "url": "https\/\/group\/{groupName}",
            "description": "Returns a user group for a given group name.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "groupName",
                    "description": "The name of the group to be queried for whether the content restriction \napplies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ce82af4a9a501cba5513ec04315056bf",
            "name": "Get group members",
            "url": "https\/\/group\/{groupName}\/member",
            "description": "Returns the users that are members of a group.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "groupName",
                    "description": "The name of the group to be queried for whether the content restriction \napplies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "9c3c5716374cf9e82369fbbb80329232",
            "name": "Get long-running tasks",
            "url": "https\/\/longtask",
            "description": "Returns information about all active long-running tasks (e.g. space export), \nsuch as how long each task has been running and the percentage of each task \nthat has completed.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "0bdb6c6175a2e0728500e065041df506",
            "name": "Get long-running task",
            "url": "https\/\/longtask\/{id}",
            "description": "Returns information about an active long-running task (e.g. space export), \nsuch as how long it has been running and the percentage of the task that \nhas completed.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "id",
                    "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "f44a1215903bf10acf2cf0fcc40ee8cd",
            "name": "Find target entities related to a source entity",
            "url": "https\/\/relation\/{relationName}\/from\/{sourceType}\/{sourceKey}\/to\/{targetType}",
            "description": "Returns all target entities that have a particular relationship to the \nsource entity. Note, relationships are one way.\n\nFor example, the following method finds all content that the current user \nhas an 'ignore' relationship with:\n`GET https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/relation\/ignore\/from\/user\/current\/to\/content`\nNote, 'ignore' is an example custom relationship type.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view both the target entity ",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "relationName",
                    "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceType",
                    "description": "The source entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceKey",
                    "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetType",
                    "description": "The target entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceStatus",
                    "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetStatus",
                    "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceVersion",
                    "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetVersion",
                    "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c3a725ef9c338cd16867332535a9c8e6",
            "name": "Find relationship from source to target",
            "url": "https\/\/relation\/{relationName}\/from\/{sourceType}\/{sourceKey}\/to\/{targetType}\/{targetKey}",
            "description": "Find whether a particular type of relationship exists from a source \nentity to a target entity. Note, relationships are one way.\n\nFor example, you can use this method to find whether the current user has \nselected a particular page as a favorite (i.e. 'save for later'):\n`GET https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/relation\/favourite\/from\/user\/current\/to\/content\/123`\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view both the target entity and sour",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "relationName",
                    "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceType",
                    "description": "The source entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceKey",
                    "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetType",
                    "description": "The target entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetKey",
                    "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceStatus",
                    "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetStatus",
                    "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceVersion",
                    "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetVersion",
                    "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "fae59dfd18c0816028f6625f7ea4dbb5",
            "name": "Create relationship",
            "url": "https\/\/relation\/{relationName}\/from\/{sourceType}\/{sourceKey}\/to\/{targetType}\/{targetKey}",
            "description": "Creates a relationship between two entities (user, space, content). The \n'favourite' relationship is supported by default, but you can use this method \nto create any type of relationship between two entities.\n\nFor example, the following method creates a 'sibling' relationship between \ntwo pieces of content:\n`GET https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/relation\/sibling\/from\/content\/123\/to\/content\/456`\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to a",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "relationName",
                    "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceType",
                    "description": "The source entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceKey",
                    "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetType",
                    "description": "The target entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetKey",
                    "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceStatus",
                    "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetStatus",
                    "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceVersion",
                    "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetVersion",
                    "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c1df67a6c2ec11f7fa599fb56d18a1ab",
            "name": "Delete",
            "url": "https\/\/relation\/{relationName}\/from\/{sourceType}\/{sourceKey}\/to\/{targetType}\/{targetKey}",
            "description": "Deletes a relationship between two entities (user, space, content).\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nFor favourite relationships, the current user can only delete their own \nfavourite relationships. A space administrator can delete favourite \nrelationships for any user.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "relationName",
                    "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceType",
                    "description": "The source entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceKey",
                    "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetType",
                    "description": "The target entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetKey",
                    "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceStatus",
                    "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetStatus",
                    "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceVersion",
                    "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetVersion",
                    "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "cb42396c3fadacc339eaca2f34fa8f50",
            "name": "Find target entities related to a source entity",
            "url": "https\/\/relation\/{relationName}\/to\/{targetType}\/{targetKey}\/from\/{sourceType}",
            "description": "Returns all target entities that have a particular relationship to the \nsource entity. Note, relationships are one way.\n\nFor example, the following method finds all users that have a 'collaborator' \nrelationship to a piece of content with an ID of '1234':\n`GET https:\/\/your-domain.atlassian.net\/wiki\/rest\/api\/relation\/collaborator\/to\/content\/1234\/from\/user`\nNote, 'collaborator' is an example custom relationship type.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermissi",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "relationName",
                    "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceType",
                    "description": "The source entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetType",
                    "description": "The target entity type of the relationship.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetKey",
                    "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceStatus",
                    "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetStatus",
                    "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "sourceVersion",
                    "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "targetVersion",
                    "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8682500277d1569b51e78972673b41f9",
            "name": "Search",
            "url": "https\/\/search",
            "description": "Searches for content using the \n[Confluence Query Language (CQL)](https:\/\/developer.atlassian.com\/cloud\/confluence\/advanced-searching-using-cql\/)\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to view the entities. Note, only entities that the user has \npermission to view will be returned.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "cql",
                    "description": "The CQL string that is used to find the requested content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "cqlcontext",
                    "description": "The space, content, and content status to execute the search against. \nSpecify this as an object with the following properties:\n\n- `spaceKey` Key of the space to search against. Optional.\n- `contentId` ID of the content to search against. Optional. Must \nbe in the space spacified by `spaceKey`.\n- `contentStatuses` Content statuses to search against. Optional.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "includeArchivedSpaces",
                    "description": "Include content from archived spaces in the results.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "1cad0250edb3ef653794e2278c316a4f",
            "name": "Get look and feel settings",
            "url": "https\/\/settings\/lookandfeel",
            "description": "Returns the look and feel settings for the site or a single space. This \nincludes attributes such as the color scheme, padding, and border radius.\n\nThe look and feel settings for a space can be inherited from the global \nlook and feel settings or provided by a theme.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nNone",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "4e0ddabbad56ad20f14d807f79c8d895",
            "name": "Update look and feel settings",
            "url": "https\/\/settings\/lookandfeel\/custom",
            "description": "Updates the look and feel settings for the site or for a single space.\nIf custom settings exist, they are updated. If no custom settings exist, \nthen a set of custom settings is created.\n\nNote, if a theme is selected for a space, the space look and feel settings \nare provided by the theme and cannot be overridden.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c6af6502b3b10009d9d8a5e40639b68e",
            "name": "Reset look and feel settings",
            "url": "https\/\/settings\/lookandfeel\/custom",
            "description": "Resets the custom look and feel settings for the site or a single space.\nThis changes the values of the custom settings to be the same as the \ndefault settings. It does not change which settings (default or custom) \nare selected. Note, the default space settings are inherited from the \ncurrent global settings.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c42aef8f6ee5dee789bc83f582a271d7",
            "name": "Set look and feel settings",
            "url": "https\/\/settings\/lookandfeel\/selected",
            "description": "Sets the look and feel settings to either the default settings or the\ncustom settings, for the site or a single space. Note, the default \nspace settings are inherited from the current global settings.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "a5b9af43b3a39eb7240a9e9f2b52bb9a",
            "name": "Get system info",
            "url": "https\/\/settings\/systemInfo",
            "description": "Returns the system information for the Confluence Cloud tenant. This\ninformation is used by Atlassian.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "f4e0f3cfde827cfb42f4ff6af7bf7286",
            "name": "Get themes",
            "url": "https\/\/settings\/theme",
            "description": "Returns all themes, not including the default theme.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: None",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "54e6cdf91187197d67d089fed889c91f",
            "name": "Get global theme",
            "url": "https\/\/settings\/theme\/selected",
            "description": "Returns the globally assigned theme.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: None",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "6d2877a2d2aa0ef99f93783827fd4888",
            "name": "Get theme",
            "url": "https\/\/settings\/theme\/{themeKey}",
            "description": "Returns a theme. This includes information about the theme name,\ndescription, and icon.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: None",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "themeKey",
                    "description": "The key of the theme to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "0d81aa1bde84511efc1233092a1c9842",
            "name": "Get spaces",
            "url": "https\/\/space",
            "description": "Returns all spaces. The returned spaces are ordered alphabetically in\nascending order by space key.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nNote, the returned list will only contain spaces that the current user\nhas permission to view.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "type",
                    "description": "The type of content to return.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "status",
                    "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "label",
                    "description": "Filter the results to spaces based on their label.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "favourite",
                    "description": "Filter the results to the favourite spaces of the user specified by\n`favouriteUserKey`. Note, 'favourite' spaces are also\nknown as 'saved for later' spaces.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "favouriteUserKey",
                    "description": "The userKey of the user, whose favourite spaces are used to filter\nthe results when using the `favourite` parameter.\n\nLeave blank for the current user. Use [Get user](#api-user-get) to \nget the userKey for a user.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "f02f16624fe02ae538cf927e326aa8e7",
            "name": "Create space",
            "url": "https\/\/space",
            "description": "Creates a new space. Note, currently you cannot set space labels when\ncreating a space.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Create Space(s)' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "33869c1033e4402387d9ad063f833b44",
            "name": "Create private space",
            "url": "https\/\/space\/_private",
            "description": "Creates a new space that is only visible to the creator. This method is\nthe same as the [Create space](#api-space-post) method with permissions\nset to the current user only. Note, currently you cannot set space\nlabels when creating a space.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Create Space(s)' global permission.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b5e7d0e2e302c752bf21a473b956febd",
            "name": "Get space",
            "url": "https\/\/space\/{spaceKey}",
            "description": "Returns a space. This includes information like the name, description,\nand permissions, but not the content in the space.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'View' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "5d00be96dd8f592f14c6f782c0ff17b9",
            "name": "Update space",
            "url": "https\/\/space\/{spaceKey}",
            "description": "Updates the name, description, or homepage of a space.\n\n-   For security reasons, permissions cannot be updated via the API and\nmust be changed via the user interface instead.\n-   Currently you cannot set space labels when updating a space.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "efda80c8942cb0b49a66d33ec7e4e899",
            "name": "Delete space",
            "url": "https\/\/space\/{spaceKey}",
            "description": "Deletes a space. Note, the space will be deleted in a long running task.\nTherefore, the space may not be deleted yet when this method has\nreturned. Clients should poll the status link that is returned in the\nresponse until the task completes.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ebf1ad8cd3f1eca269e44fa11da254f1",
            "name": "Get content for space",
            "url": "https\/\/space\/{spaceKey}\/content",
            "description": "Returns all content in a space. The returned content is grouped by type\n(pages then blogposts), then ordered by content ID in ascending order.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'View' permission for the space. Note, the returned list will only\ncontain content that the current user has permission to view.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "depth",
                    "description": "Currently, this parameter is not used. \nComments are returned at the root level only.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "5c986836d91a0777d481567aa4a8ac45",
            "name": "Get content by type for space",
            "url": "https\/\/space\/{spaceKey}\/content\/{type}",
            "description": "Returns all content of a given type, in a space. The returned content is\nordered by content ID in ascending order.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'View' permission for the space. Note, the returned list will only\ncontain content that the current user has permission to view.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "type",
                    "description": "The type of children to return.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "depth",
                    "description": "Currently, this parameter is not used. \nComments are returned at the root level only.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8d8c7f00b0611f786555a1ab3ee74d99",
            "name": "Get space properties",
            "url": "https\/\/space\/{spaceKey}\/property",
            "description": "Returns all properties for the given space. Space properties are a key-value storage associated with a space.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**: \u2018View\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "9500b52fa13fdf768806d4226608b824",
            "name": "Create space property",
            "url": "https\/\/space\/{spaceKey}\/property",
            "description": "Creates a new space property.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**:\n\u2018Admin\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ff1f80904e640472cbcd2a9ae2c1782f",
            "name": "Get space property",
            "url": "https\/\/space\/{spaceKey}\/property\/{key}",
            "description": "Returns a space property.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**: \u2018View\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "9390d944a5738ef26389f4bc8c4173a9",
            "name": "Create space property for key",
            "url": "https\/\/space\/{spaceKey}\/property\/{key}",
            "description": "Creates a new space property. This is the same as `POST\n\/space\/{spaceKey}\/property` but the key for the property is passed as a\npath parameter, rather than in the request body.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**:\n\u2018Admin\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ea0cfe3732ca0bec86f0103acc0f9e12",
            "name": "Update space property",
            "url": "https\/\/space\/{spaceKey}\/property\/{key}",
            "description": "Updates a space property. Note, you cannot update the key of a space\nproperty, only the value.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**:\n\u2018Admin\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "b47ced5441f13e72ffef938219885796",
            "name": "Delete space property",
            "url": "https\/\/space\/{spaceKey}\/property\/{key}",
            "description": "Deletes a space property.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**:\n\u2018Admin\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the content property.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8ab2c35d319617d23754e05dfefd6b44",
            "name": "Get space settings",
            "url": "https\/\/space\/{spaceKey}\/settings",
            "description": "Returns the settings of a space. Currently only the\n`routeOverrideEnabled` setting can be returned.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'View' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "1584f2c800b5e539d4bbd2e1a21eea60",
            "name": "Update space settings",
            "url": "https\/\/space\/{spaceKey}\/settings",
            "description": "Updates the settings for a space. Currently only the\n`routeOverrideEnabled` setting can be updated.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "5b777b22e126bf86fa4fa755bb097569",
            "name": "Get space theme",
            "url": "https\/\/space\/{spaceKey}\/theme",
            "description": "Returns the theme selected for a space, if one is set. If no space \ntheme is set, this means that the space is inheriting the global look \nand feel settings.\n\n**[Permissions required](https:\/\/confluence.atlassian.com\/x\/_AozKw)**: \u2018View\u2019 permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "f7deae0c8c3eee64e6d8d5a6284dc92c",
            "name": "Set space theme",
            "url": "https\/\/space\/{spaceKey}\/theme",
            "description": "Sets the theme for a space. Note, if you want to reset the space theme to \nthe default Confluence theme, use the 'Reset space theme' method instead \nof this method.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ec0ec411af4de2e8043552349af0844e",
            "name": "Reset space theme",
            "url": "https\/\/space\/{spaceKey}\/theme",
            "description": "Resets the space theme. This means that the space will inherit the \nglobal look and feel settings\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**:\n'Admin' permission for the space.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ce856848502d04c99abe0309ab7435b0",
            "name": "Create content template",
            "url": "https\/\/template",
            "description": "Creates a new content template. Note, blueprint templates cannot be created via the REST API.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space to create a space template or 'Confluence Administrator' \nglobal permission to create a global template.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "f6d1d16834136ca4a27e3fd556f104cc",
            "name": "Update content template",
            "url": "https\/\/template",
            "description": "Updates a content template. Note, blueprint templates cannot be updated\nvia the REST API.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space to create a space template or 'Confluence Administrator' \nglobal permission to create a global template.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "987cd974383d1e71e3739e683442edd0",
            "name": "Get blueprint templates",
            "url": "https\/\/template\/blueprint",
            "description": "Returns all templates provided by blueprints. Use this method to retrieve \nall global blueprint templates or all blueprint templates in a space.\n\nNote, all global blueprints are inherited by each space. Space blueprints \ncan be customised without affecting the global blueprints.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "fd1e374b8638a5ce93e492d01c4bf80c",
            "name": "Get content templates",
            "url": "https\/\/template\/page",
            "description": "Returns all content templates. Use this method to retrieve all global\ncontent templates or all content templates in a space.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space to view space templates and 'Confluence \nAdministrator' global permission to view global templates.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be queried for its content.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "39bdb0cebe9fc39f22f8b386441e6ea4",
            "name": "Get content template",
            "url": "https\/\/template\/{contentTemplateId}",
            "description": "Returns a content template. This includes information about template, \nlike the name, the space or blueprint that the template is in, the body \nof the template, and more.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Admin' permission for the space to view space templates and 'Confluence \nAdministrator' global permission to view global templates.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "contentTemplateId",
                    "description": "The ID of the content template to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "65c6cff8941b6ce13261fc8a872ef5c4",
            "name": "Remove template",
            "url": "https\/\/template\/{contentTemplateId}",
            "description": "Deletes a template. This results in different actions depending on the \ntype of template:\n\n- If the template is a content template, it is deleted.\n- If the template is a modified space-level blueprint template, it reverts \nto the template inherited from the global-level blueprint template.\n- If the template is a modified global-level blueprint template, it reverts \nto the default global-level blueprint template.\n\n Note, unmodified blueprint templates cannot be deleted.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "contentTemplateId",
                    "description": "The ID of the content template to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "34d56a673a7482735215f2a4187a3777",
            "name": "Get user",
            "url": "https\/\/user",
            "description": "Returns a user. This includes information about the user, like the\ndisplay name, userKey, account ID, profile picture, and more.\n\nThe `username`, `key`, or `accountId` parameter must be specified, in \norder to identify the user.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "0ce42b1489d02b9e6ec9e059a70058db",
            "name": "Get anonymous user",
            "url": "https\/\/user\/anonymous",
            "description": "Returns information about how anonymous users are represented, like the\nprofile picture and display name.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "89af6d7d4b880a9bd447a8100e0bdcfb",
            "name": "Get current user",
            "url": "https\/\/user\/current",
            "description": "Returns the currently logged-in user. This includes information about\nthe user, like the display name, userKey, account ID, profile picture,\nand more.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "expand",
                    "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` retur",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "d21b5c121e158e9f09cb8dca4a190bc7",
            "name": "Get group memberships for user",
            "url": "https\/\/user\/memberof",
            "description": "Returns the groups that a user is a member of.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "start",
                    "description": "The starting index of the returned records.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "limit",
                    "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "954797062f578ebada4734827bfced21",
            "name": "Get content watch status",
            "url": "https\/\/user\/watch\/content\/{contentId}",
            "description": "Returns whether a user is watching a piece of content. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermissi",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "contentId",
                    "description": "The ID of the content to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8400fa8957da648158a2a88466f8608e",
            "name": "Add content watcher",
            "url": "https\/\/user\/watch\/content\/{contentId}",
            "description": "Adds a user as a watcher to a piece of content. Choose the user by doing \none of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https:\/\/confluence.atlass",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "contentId",
                    "description": "The ID of the content to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c98592996e619bf089ebdd5683af882a",
            "name": "Remove content watcher",
            "url": "https\/\/user\/watch\/content\/{contentId}",
            "description": "Removes a user as a watcher from a piece of content. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "contentId",
                    "description": "The ID of the content to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "8c55ef4ec6a7167f22783a4502f1e577",
            "name": "Get label watch status",
            "url": "https\/\/user\/watch\/label\/{labelName}",
            "description": "Returns whether a user is watching a label. Choose the user by doing one \nof the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to acces",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "labelName",
                    "description": "The name of the label to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "c573c44e59e76d377e52d48dd05bbe08",
            "name": "Add label watcher",
            "url": "https\/\/user\/watch\/label\/{labelName}",
            "description": "Adds a user as a watcher to a label. Choose the user by doing one of the \nfollowing:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "labelName",
                    "description": "The name of the label to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "3efa78e5f1e1b618a4a9782e7baa715a",
            "name": "Remove label watcher",
            "url": "https\/\/user\/watch\/label\/{labelName}",
            "description": "Removes a user as a watcher from a label. Choose the user by doing one of \nthe following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access ",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "labelName",
                    "description": "The name of the label to be queried for whether the specified user is \nwatching it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "ac4b681b13080e14b8bc1bf1197114cd",
            "name": "Get space watch status",
            "url": "https\/\/user\/watch\/space\/{spaceKey}",
            "description": "Returns whether a user is watching a space. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to acces",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "333f584065fb90f2ccb052b72e21583f",
            "name": "Add space watcher",
            "url": "https\/\/user\/watch\/space\/{spaceKey}",
            "description": "Adds a user as a watcher to a space. Choose the user by doing one of the \nfollowing:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        },
        {
            "id": "bcdb173cb8308609441bf217c3a60bcd",
            "name": "Remove space watch",
            "url": "https\/\/user\/watch\/space\/{spaceKey}",
            "description": "Removes a user as a watcher from a space. Choose the user by doing one of \nthe following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` \nto identify the user. The user making the request must be a Confluence administrator.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https:\/\/confluence.atlassian.com\/x\/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access ",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "spaceKey",
                    "description": "The key of the space to be returned.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "key",
                    "description": "The key of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "userName",
                    "description": "The username of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "accountId",
                    "description": "The account ID of the user to be queried for whether the content \nrestriction applies to it.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "75b89d9aa0149868bd2c4cf08cdefbef",
            "rawModeData": ""
        }
    ]
}